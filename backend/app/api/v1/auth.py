"""
Authentication API Endpoints.
"""

from fastapi import APIRouter, HTTPException, Depends, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from pydantic import BaseModel
from typing import Dict, Any
from datetime import timedelta
from app.services.auth_service import auth_service, get_current_user, get_current_admin_user
import logging

logger = logging.getLogger(__name__)
router = APIRouter()
security = HTTPBasic()


class LoginRequest(BaseModel):
    """Login request schema."""
    username: str
    password: str


class TokenResponse(BaseModel):
    """Token response schema."""
    access_token: str
    token_type: str
    expires_in: int


@router.post("/login", response_model=TokenResponse, summary="User Login")
async def login(request: LoginRequest) -> TokenResponse:
    """Authenticate user and return access token."""
    user = auth_service.authenticate_user(request.username, request.password)
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token_expires = timedelta(minutes=auth_service.access_token_expire_minutes)
    access_token = auth_service.create_access_token(
        data={"sub": user["username"], "role": user["role"], "permissions": user["permissions"]},
        expires_delta=access_token_expires
    )
    
    return TokenResponse(
        access_token=access_token,
        token_type="bearer",
        expires_in=auth_service.access_token_expire_minutes * 60
    )


@router.post("/refresh", response_model=TokenResponse, summary="Refresh Token")
async def refresh_token(
    current_user: Dict[str, Any] = Depends(get_current_user)
) -> TokenResponse:
    """Refresh access token."""
    access_token_expires = timedelta(minutes=auth_service.access_token_expire_minutes)
    access_token = auth_service.create_access_token(
        data={"sub": current_user["username"], "role": current_user["role"]},
        expires_delta=access_token_expires
    )
    
    return TokenResponse(
        access_token=access_token,
        token_type="bearer",
        expires_in=auth_service.access_token_expire_minutes * 60
    )


@router.get("/me", summary="Get Current User")
async def get_current_user_info(
    current_user: Dict[str, Any] = Depends(get_current_user)
) -> Dict[str, Any]:
    """Get current user information."""
    return {
        "username": current_user.get("username"),
        "role": current_user.get("role"),
        "permissions": current_user.get("permissions", [])
    }


@router.post("/api-key", summary="Generate API Key")
async def generate_api_key(
    current_user: Dict[str, Any] = Depends(get_current_admin_user)
) -> Dict[str, str]:
    """Generate a new API key (admin only)."""
    api_key = auth_service.create_api_key()
    
    # TODO: Store API key in database
    logger.info(f"API key generated by user: {current_user['username']}")
    
    return {"api_key": api_key, "message": "API key generated successfully"}
